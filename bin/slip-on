#!/usr/bin/env node

// Configuration
var program = require('commander');
var mkdirp  = require('mkdirp');
var prompt  = require('prompt');
var fs      = require('fs');
var path    = require('path');
var chalk   = require('chalk'); // Colors
var pkg     = require('../package.json');
var version = pkg.version;

// CLI configuration
program
  .version(version)
  .usage('[options] [slipper-type]');

// CLI "Examples"
program.on('--help', function() {
  console.log('  Examples:\n\n    $ slip-on --help\n    $ slip-on geta\n\n');
});
program.parse(process.argv); // grabs arguments passed to the command

// Determine which slipper we should use.
var requested_slipper = program.args.shift(); // store requested slipper as string
var slipper_dir       = path.resolve( __dirname + '/..' ); // slipper/
var templates_dir     = slipper_dir + '/templates'; // path/to/slipper/templates/
var slippers          = fs.readdir(templates_dir, function(err, results) {
  if (err) throw err;
  //If requested slipper doesn't exist, abort!
  if ( results.indexOf(requested_slipper) === -1 && ! requested_slipper ) {
    abort('\n '+ chalk.white('No slipper found.') + '\n\n Example: \n\n    $ slip-on geta\n');
  }
});

/**
 * "Geta"
 * A Gulp styled slipper.
 *
 * @function
 */
var geta = function() {

  var geta_dir = slipper_dir + '/templates/geta/';

  // Mkdir -p for all client folders
  mkdir('client/css');
  mkdir('client/js');
  mkdir('client/src');

  // License
  fs.exists('./LICENSE.md', function(exists) {
    if (exists) {
      program.confirm('Replace current license?', function(ok) {
        if (!ok) {
          // skip making
        } else {
          fs.createReadStream(geta_dir + 'LICENSE.md').pipe(
            fs.createWriteStream('./LICENSE.md')
          );
        }
      });
    } else {
      fs.createReadStream(geta_dir + 'LICENSE.md').pipe(
        fs.createWriteStream('./LICENSE.md')
      );
    }
  });

  // Package.json
  // http://stackoverflow.com/questions/20643470/execute-a-command-line-binary-in-node-js
  // var exec = require('child_process').exec;
  // exec('npm install --save-dev gulp', function (error, stdout, stderr) {
  //   console.log(error);
  //   console.log(stdout);
  //   console.log(stderr);
  // });

  // README.md

  // If "client" folder exists, prompt user for next step.
}

// Load the correct slipper template:
switch(requested_slipper) {
  case 'geta':
    geta();
    break;
  case 'rubber-slipper':
    break;
  case 'default':
    abort('\n '+ chalk.white('No slipper found.') + '\n\n Example: \n\n    $ slip-on geta\n');
    break;
} // switch

/**
 * Oeuvre!
 */
process.on('exit',function() {
  if ( Math.random() < 0.33 ) {
    var msg = "These "+chalk.white("slippers")+" were made for walkin\'!";
  } else if ( 0.33 > Math.random() > 0.66 ) {
    var msg = "Different "+chalk.white("slippers")+" for different walks of life.";
  } else {
    var msg = chalk.white("Slipper") + " straps are way more comfortable!";
  }
  abort("\n   " + msg + "\n");
});


// Helper Functions
// @link https://github.com/expressjs/generator

/**
 * Mkdir -p.
 * Useful for making a set of cascaded folders
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   ' + chalk.cyan('create:') + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 * Allow for functions to be passed allowing for
 * prettier console error messages.
 *
 * @param {String} msg
 */

function abort(msg) {
  console.log(msg);
  process.exit(1);
}
