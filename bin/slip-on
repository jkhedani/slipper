#!/usr/bin/env node

// Configuration
var program = require('commander');
var mkdirp  = require('mkdirp');
var prompt  = require('prompt');
var fs      = require('fs');
var path    = require('path');
var chalk   = require('chalk'); // Colors
var pkg     = require('../package.json');
var version = pkg.version;

// Node Core
var fs = require('fs');
var path = require('path');

// CLI configuration
program
  .version(version)
  .usage('[options] [slipper-type]');

// CLI "Examples"
program.on('--help', function() {
  console.log('  Examples:\n\n    $ slip-on --help\n    $ slip-on geta\n\n');
});
program.parse(process.argv); // grabs arguments passed to the command

// Determine which slipper we should use.
var selected_slipper = program.args.shift(); // store desired
var slipper_dir  = path.resolve( path.dirname() ); // slipper/
var slippers = fs.readdir(slipper_dir + '/templates', function(err, results) {
  if (err) throw err;
  var available_slippers = results.splice(1,1);
  // If a slipper exists in results and is defined
  if ( results.indexOf(selected_slipper) !== -1 && selected_slipper ) {
    console.log("Slipper stay there.");
  } else {
    abort('\n '+ chalk.white('No slipper found.') + '\n\n Example: \n\n    $ slip-on geta\n')
  }
});


// If slipper type is undefined or "could not be found"
// if ( ! program.args.shift() ) {
//   abort('\n No slipper found. \n\n Try: \n\n    $ slip-on geta\n');
// }

/**
 * "Geta"
 * A Gulp styled slipper.
 *
 * @function
 */
// var geta = function() {
//   mkdir( folder_name ); // Just create a client folder
//   // mkdir(path + '/client'); // Just create a client folder
//
//   // If "client" folder exists, prompt user for next step.
// }
// geta(destination_path);


// if ( program.args. === 'geta' ) {
//
// }

// /**
//  * Generate application
//  *
//  * Create the necessary files and folders for bootstrap the bootstrap.
//  * If target directory has content, ask user if they would like to
//  */
// (function createApplication(path) {
//   emptyDirectory(path, function(empty){
//     if (empty || program.force) {
//       createApplicationAt(path);
//     } else {
//       prompt.message = "";
//       prompt.delimiter = "";
//       prompt.start();
//       prompt.get({
//         properties: {
//           continue: {
//             description: "This folder isn't empty. Continue? [Y/n]".yellow
//           }
//         }
//       },function(err,result) {
//         if (result.continue === 'Y') {
//           process.stdin.destroy();
//           createApplicationAt(path);
//         } else {
//           console.log('No slippers today. You decide to step back into the house.');
//         }
//       });
//     }
//   });
// })(destination_path);
//
// function createApplicationAt(path) {
//
//   // Display instructions to the user after bootstrapping
//   process.on('exit', function(){
//     console.log();
//     console.log('   install dependencies:');
//     console.log('     $ cd %s && npm install', path);
//     console.log();
//     console.log('   run the app:');
//     console.log('     $ DEBUG=' + app_name + ' ./bin/www');
//     console.log();
//   });
//   mkdir(path + '/client'); // Just create a client folder
//   // mkdir(path, function(){
//   //   write(path + '/package.json', JSON.stringify(pkg, null, 2));
//   //   write(path + '/app.js', app);
//   //   mkdir(path + '/bin', function(){
//   //    www = www.replace('{name}', app_name);
//   //    write(path + '/bin/www', www, 0755);
//   //   });
//   // });
// }

/**
 * Helper Functions
 * Useful helpers created by the expressjs team for
 * their generator.
 *
 * @link https://github.com/expressjs/generator
 */


/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 * Allow for functions to be passed allowing for
 * prettier console error messages.
 *
 * @param {String} msg
 */

function abort(msg) {
  console.log(msg);
  process.exit(1);
}
